package chat

import "fmt"
import "time"

import "github.com/Ewan-Greer09/remote-colab/views/components"
import "github.com/Ewan-Greer09/remote-colab/internal/db"

// Displays the avilable rooms for a user to join
templ ChatPage(title, email string, authed bool) {
	@components.Base(title, authed) {
		<div hx-get={ fmt.Sprintf("/chat/available-rooms/%s", email) } hx-swap="innerHTML" hx-trigger="load" hx-target="this"></div>
	}
}

templ ChatRoom(title, roomId string, authed bool) {
	@components.Base(title, authed) {
		<div hx-get={ fmt.Sprintf("/chat/room/window/%s", roomId) } hx-trigger="load" hx-swap="outerHTML" hx-target="this">Loading...</div>
	}
}

type ChatWindowProps struct {
	Username string
	RoomID   string
	Messages []db.Message
}

templ ChatWindow(props ChatWindowProps) {
	<main class="flex flex-col items-center bg-gray-100">
		<form hx-get="/chat/invite">
			<input type="text" name="invitee" id="inivte-text"/>
			<input type="text" name="roomId" value={ props.RoomID } hidden/>
			<button type="submit">Invite</button>
		</form>
		<div id="chat-room" class="w-full max-w-md mx-auto my-4 bg-white shadow-md rounded-lg overflow-hidden">
			<ul class="divide-y divide-gray-200 h-[500px] max-h-[500px] scroll-auto overflow-y-scroll" id="messages">
				for _, message := range props.Messages {
					<li class="flex flex-row justify-between p-2">
						<div>
							<b>{ fmt.Sprintf("%s:", message.Author) }</b>
							{ fmt.Sprintf("%s", message.Content) }
						</div>
						<div class="font-light text-gray-600">{ fmt.Sprintf(message.CreatedAt.Local().Format("03:04:05")) }</div>
					</li>
				}
				<div id="new-messages"></div>
			</ul>
		</div>
		<div hx-ext="ws" hx-trigger="load" ws-connect={ fmt.Sprintf("/chat/connect/%s", props.RoomID) }>
			<form id="form" ws-send="true">
				<div class="flex items-center border-b border-teal-500 py-2">
					<input id="text-input" name="chat-message" class="appearance-none bg-transparent border-none w-full text-gray-700 mr-3 py-1 px-2 leading-tight focus:outline-none" type="text" placeholder="Enter your message" aria-label="Message"/>
					<input type="text" name="username" value={ props.Username } hidden/>
					<button class="flex-shrink-0 bg-teal-500 hover:bg-teal-700 border-teal-500 hover:border-teal-700 text-sm border-4 text-white py-1 px-2 rounded" type="submit" hx-post="/chat/send-message" hx-swap="outerHTML" hx-target="#form" hx-trigger="submit">
						Send
					</button>
				</div>
			</form>
			<script>
            document.getElementById("form").addEventListener("submit", function() {
                document.getElementById("text-input").value = "";
            });

            function scrollToBottom() {
                var messageBox = document.getElementById("messages");
                messageBox.scrollTop = messageBox.scrollHeight - messageBox.clientHeight;
            }

            document.addEventListener("htmx:afterRequest", function(event) {
                if (event.target.id === "messages" || event.target.closest("#messages")) {
                    scrollToBottom();
                }
            });

            // Ensure the chat window is scrolled to the bottom after initial load
            window.addEventListener('load', function() {
                scrollToBottom();
            });
			</script>
		</div>
	</main>
}

type MessageProps struct {
	Content  string
	Username string
	Time     time.Time
}

templ Message(props MessageProps) {
	<div class="text-gray-800 flex" id="new-messages" hx-swap-oob="beforeend">
		<li class="flex flex-row justify-between p-2">
			<div>
				<b>{ fmt.Sprintf("%s:", props.Username) }</b>
				{ fmt.Sprintf("%s", props.Content) }
			</div>
			<div class="font-light text-gray-600">{ fmt.Sprintf(props.Time.Local().Format("03:04:05")) }</div>
		</li>
	</div>
}

templ AvailableRooms(rooms []db.ChatRoom) {
	<main class="flex flex-col items-center bg-gray-100">
		<form hx-get="/chat/create">
			<input type="text" name="room-name" placeholder="Enter room name"/>
			<button type="submit">Create Room</button>
		</form>
		<ul>
			for i := len(rooms) - 1; i >= 0; i-- {
				@RoomCard(rooms[i])
			}
		</ul>
	</main>
}

templ RoomCard(room db.ChatRoom) {
	<li class="cursor-pointer p-4 m-2 border-2 border-gray-500 rounded-md text-black bg-white hover:bg-gray-500 ease-in-out shadow-md hover:text-white">
		<a href={ templ.SafeURL(fmt.Sprintf("/chat/room/%s", room.UID)) } class="block text-inherit hover:text-inherit">
			<span class="font-bold">Name:</span> { fmt.Sprint(room.Name) }
			<br/>
			<span class="font-bold">Members:</span> { fmt.Sprint(len(room.Members)) }
		</a>
	</li>
}
