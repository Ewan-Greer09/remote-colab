package chat

import "fmt"

import "github.com/Ewan-Greer09/remote-colab/views/components"
import "github.com/Ewan-Greer09/remote-colab/internal/db"

// Displays the avilable rooms for a user to join
templ ChatPage(title, email string, authed bool) {
	@components.Base(title, authed) {
		<div hx-get={ fmt.Sprintf("/chat/available-rooms/%s", email) } hx-swap="innerHTML" hx-trigger="load" hx-target="this"></div>
	}
}

templ ChatRoom(title, roomId string, authed bool) {
	@components.Base(title, authed) {
		<div hx-get={ fmt.Sprintf("/chat/room/window/%s", roomId) } hx-trigger="load" hx-swap="outerHTML" hx-target="this">Loading...</div>
	}
}

type ChatWindowProps struct {
	Username string
	RoomID   string
	Messages []db.Message
}

templ NewChatPage(rooms []db.ChatRoom, currentUser string, teamName string, oldMessages []db.Message) {
	@components.Base("TeamWork - chat", true) {
		<div class="h-[800px] max-h-[800px] overflow-y-hidden flex mx-20 pt-10">
			@sideBar(rooms)
			@ChatArea(teamName, rooms[0].UID, currentUser, oldMessages)
			// should swap when button is pressed with visible version ? could mabey just pass a bool to decide if it should be seen or not
			<div id="modal-container"></div>
		</div>
	}
}

templ sideBar(rooms []db.ChatRoom) {
	<div class="bg-white w-1/4 h-full shadow-lg p-4">
		<div class="flex justify-between items-center mb-4">
			<h2 class="text-xl font-semibold">Chat Rooms</h2>
			<button class="bg-blue-500 text-white px-4 py-2 rounded">
				New Room
			</button>
		</div>
		<ul>
			for _, room := range rooms {
				<li hx-get={ fmt.Sprintf("/chat/room/%s", room.UID) } hx-target="#chat-area" class="mb-2 p-2 bg-gray-200 rounded hover:bg-gray-300 cursor-pointer">
					{ room.Name }
				</li>
			}
		</ul>
	</div>
}

templ ChatArea(chatName string, roomId string, currentUser string, oldMessages []db.Message) {
	<div id="chat-area" class="flex-1 flex flex-col overflow-y-hidden" hx-ext="ws" hx-trigger="load" ws-connect={ fmt.Sprintf("/chat/connect/%s", roomId) }>
		<div class="bg-white shadow-lg p-4 flex justify-between items-center">
			<h2 class="text-xl font-semibold">{ fmt.Sprint(chatName) }</h2>
			<form hx-get="/chat/invite-modal" hx-target="#modal-container" hx-swap="innerHTML">
				<input type="text" name="roomId" value={ fmt.Sprint(roomId) } hidden/>
				<button type="submit" class="bg-green-500 text-white px-4 py-2 rounded">
					Invite Users
				</button>
			</form>
		</div>
		<div id="messages" class="flex-1 overflow-y-scroll p-4">
			for _, m := range oldMessages {
				@OldMessage(m.Author, currentUser, m.Content)
			}
			<div id="new-messages"></div>
		</div>
		<div class="bg-white p-4 shadow-lg">
			<form id="form" class="flex flex-row" ws-send="true">
				<input
					id="text-input"
					type="text"
					placeholder="Type a message"
					name="chat-message"
					class="w-full p-2 border rounded z-10"
				/>
				<input type="text" name="username" value={ currentUser } hidden/>
				<button type="submit" class="px-4 py-2 ml-2 w-fit bg-blue-500 text-white rounded">send</button>
			</form>
		</div>
	</div>
}

templ OldMessage(author string, currentUser string, content string) {
	if author == currentUser {
		<div class="mb-4">
			<p class="text-sm text-gray-500">{ fmt.Sprint(author) }</p>
			<div class="bg-blue-500 p-2 rounded">{ fmt.Sprint(content) }</div>
		</div>
	} else {
		<div class="mb-4">
			<p class="text-sm text-gray-500">{ fmt.Sprint(author) }</p>
			<div class="bg-green-500 p-2 rounded">{ fmt.Sprint(content) }</div>
		</div>
	}
}

templ Message(author string, currentUser string, content string) {
	if author == currentUser {
		<div id="new-messages" hx-swap-oob="beforeend" class="mb-4">
			<p class="text-sm text-gray-500">{ fmt.Sprint(author) }</p>
			<div class="bg-blue-500 p-2 rounded">{ fmt.Sprint(content) }</div>
		</div>
	} else {
		<div id="new-messages" hx-swap-oob="beforeend" class="mb-4">
			<p class="text-sm text-gray-500">{ fmt.Sprint(author) }</p>
			<div class="bg-green-500 p-2 rounded">{ fmt.Sprint(content) }</div>
		</div>
	}
}

templ InviteModalVisible(roomId string) {
	<div
		id="inviteModal"
		class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
	>
		<form hx-get="/chat/invite" class="bg-white p-8 rounded shadow-lg w-1/3">
			<h2 class="text-xl font-semibold mb-4">Invite Users</h2>
			<input
				type="text"
				placeholder="Enter email addresses"
				class="w-full p-2 border rounded mb-4"
				required
				hx-validate
			/>
			<input type="text" name="roomId" value={ fmt.Sprint(roomId) } hidden/>
			<div class="flex justify-end">
				<button
					class="bg-gray-500 text-white px-4 py-2 rounded mr-2"
					hx-get="/chat/invite-modal-hide"
					hx-target="#modal-container"
					hx-swap="innerHTML"
				>
					Cancel
				</button>
				<button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded">
					Invite
				</button>
			</div>
		</form>
	</div>
}
